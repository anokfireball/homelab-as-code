apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: immich-postgresql
  namespace: default
spec:
  # https://github.com/immich-app/immich-charts/issues/149
  # https://github.com/immich-app/immich/discussions/14280
  imageName: ghcr.io/tensorchord/cloudnative-vectorchord:16-0.3.0
  instances: 1
  postgresql:
    shared_preload_libraries:
      - "vchord.so"
  managed:
    services:
      disabledDefaultServices: ["ro", "r"]
    roles:
      - name: backup
        passwordSecret:
          name: postgres-backup-user
        login: true
        superuser: false
        inRoles:
          - pg_read_all_data
      - name: immich
        superuser: true
        login: true
        passwordSecret:
          name: immich-postgres-user
  bootstrap:
    initdb:
      database: immich
      owner: immich
      secret:
        name: immich-postgres-user
      postInitSQL:
        - CREATE EXTENSION IF NOT EXISTS "vector";
        - CREATE EXTENSION IF NOT EXISTS "vchord";
        - CREATE EXTENSION IF NOT EXISTS "cube" CASCADE;
        - CREATE EXTENSION IF NOT EXISTS "earthdistance" CASCADE;
  storage:
    size: 4Gi
    storageClass: cluster-replicated
---
apiVersion: k8up.io/v1
kind: PreBackupPod
metadata:
  name: immich-database-backup
  namespace: default
  labels:
    backup: immich-database
  annotations:
    k8up.io/backup: "true"
spec:
  backupCommand: sh -c 'PGHOST="$POSTGRES_HOST" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dumpall --clean'
  pod:
    spec:
      containers:
        - name: immich-database-backup
          image: postgres:16.8-alpine@sha256:114d10708f03b728b5844fa6ff04383c43e6d409967a9cf652d5e5d6fbf5111a
          command:
            - "sleep"
            - "infinity"
          env:
            - name: POSTGRES_HOST
              value: immich-postgresql-rw
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: password
---
apiVersion: k8up.io/v1
kind: Schedule
metadata:
  name: immich-database
  namespace: default
spec:
  backend:
    repoPasswordSecretRef:
      name: k8up-restic-secrets
      key: restic-password
    s3:
      bucket: Habitat-Giggle9-Composer/immich
  backup:
    labelSelectors:
      - matchLabels:
          backup: immich-database
    schedule: "19 4/6 * * *"
    concurrentRunsAllowed: false
  prune:
    schedule: "49 0 1 * *"
    concurrentRunsAllowed: false
    retention:
      keepHourly: 6
      keepDaily: 14
      keepWeekly: 12
      keepMonthly: 6
      keepYearly: 2
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nas-photos
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 192.168.1.2
    path: /mnt/tank/Bilder
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nas-photos
  namespace: default
  annotations:
    k8up.io/backup: "true"
  labels:
    backup: immich-data
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 1Mi
  volumeName: nas-photos
---
apiVersion: k8up.io/v1
kind: Schedule
metadata:
  name: immich-data
  namespace: default
spec:
  backend:
    repoPasswordSecretRef:
      name: k8up-restic-secrets
      key: restic-password
    s3:
      bucket: Privatize8-Secret-Starry
  backup:
    labelSelectors:
      - matchLabels:
          backup: immich-data
    schedule: "49 2/6 * * *"
    concurrentRunsAllowed: false
  podSecurityContext:
    runAsUser: 82
  prune:
    schedule: "19 0 1 * *"
    concurrentRunsAllowed: false
    retention:
      keepHourly: 6
      keepDaily: 14
      keepWeekly: 12
      keepMonthly: 6
      keepYearly: 2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library
  namespace: default
spec:
  resources:
    requests:
      storage: 75Gi
  storageClassName: cluster-replicated
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: immich
      version: 0.9.3
      sourceRef:
        kind: HelmRepository
        name: immich-app
        namespace: flux-system
  values:
    env:
      DB_HOSTNAME: immich-postgresql-rw
      DB_USERNAME: immich
      DB_DATABASE_NAME: immich
      DB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: immich-postgres-user
            key: password
    image:
      tag: v1.134.0
    immich:
      persistence:
        library:
          existingClaim: immich-library
    redis:
      enabled: true
      global:
        storageClass: cluster-scratch
      master:
        persistence:
          size: 2Gi
    server:
      ingress:
        main:
          enabled: true
          ingressClassName: nginx
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt
          hosts:
            - host: immich.${SERVICE_DOMAIN}
              paths:
                - path: /
          tls:
            - secretName: immich-tls
              hosts:
                - immich.${SERVICE_DOMAIN}
      persistence:
        external:
          enabled: true
          mountPath: /mnt/tank/Bilder
          existingClaim: nas-photos
      resources:
        requests:
          cpu: 50m
          memory: 350Mi
    machine-learning:
      persistence:
        cache:
          enabled: true
          type: pvc
          storageClass: cluster-scratch
          accessMode: ReadWriteMany
          size: 10Gi
      resources:
        requests:
          cpu: 50m
          memory: 300Mi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: immich-server
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 2
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
    scaleDown:
      stabilizationWindowSeconds: 300
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 50
          type: Utilization
      type: Resource
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    # should really only be done for the microservices
    # needs https://github.com/immich-app/immich-charts/issues/94
    name: immich-server
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: immich-machine-learning
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 2
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
    scaleDown:
      stabilizationWindowSeconds: 300
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 50
          type: Utilization
      type: Resource
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: immich-machine-learning
