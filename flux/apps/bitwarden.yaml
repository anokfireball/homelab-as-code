apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: vaultwarden-postgresql
  namespace: default
spec:
  # Current Vaultwarden is built with PG 15, also use that as long as it is supported
  # https://github.com/dani-garcia/vaultwarden/blob/1.32.6/docker/Dockerfile.alpine#L56-L57
  # https://www.postgresql.org/support/versioning/
  imageName: ghcr.io/cloudnative-pg/postgresql:15.10-29@sha256:802bf1479ef7b0e0655749203cded4ecbc9a114841273de71cb205f3a03254cd
  instances: 1
  managed:
    services:
      disabledDefaultServices: ["ro", "r"]
    roles:
      - name: backup
        passwordSecret:
          name: postgres-backup-user
        login: true
        superuser: false
        inRoles:
          - pg_read_all_data
  bootstrap:
    initdb:
      database: vaultwarden
      owner: vaultwarden
      secret:
        name: bitwarden-postgres-user
  storage:
    size: 2Gi
    storageClass: cluster-replicated
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vaultwarden
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: vaultwarden
      version: 0.34.4
      sourceRef:
        kind: HelmRepository
        name: guerzon
        namespace: flux-system
  values:
    image:
      registry: ghcr.io
      repository: dani-garcia/vaultwarden
      tag: 1.34.3-alpine@sha256:d70118b9dafb8588ee2651ceb5df68db27dcbd8e18467722010644ba48d5d6d6
    resourceType: Deployment
    # TODO https://github.com/ttionya/vaultwarden-backup as sidedcar?
    storage:
      data:
        name: vaultwarden-data
        class: cluster-replicated
        accessMode: ReadWriteOnce
        size: 1Gi
    initContainers:
      - name: wait-for-postgresql
        # Current Vaultwarden is built with PG 15, also use that as long as it is supported
        # https://github.com/dani-garcia/vaultwarden/blob/1.32.6/docker/Dockerfile.alpine#L56-L57
        # https://www.postgresql.org/support/versioning/
        image: ghcr.io/cloudnative-pg/postgresql:15.10-29@sha256:802bf1479ef7b0e0655749203cded4ecbc9a114841273de71cb205f3a03254cd
        command:
          - /bin/sh
          - -ec
          - |
            until pg_isready -h vaultwarden-postgresql-rw -U vaultwarden; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
    database:
      type: postgresql
      existingSecret: bitwarden-secrets
      existingSecretKey: database-uri
    pushNotifications:
      enabled: true
      existingSecret: bitwarden-secrets
      installationId:
        existingSecretKey: installation-id
      installationKey:
        existingSecretKey: installation-key
      relayUri: https://api.bitwarden.eu
      identityUri: https://identity.bitwarden.eu
    domain: https://bitwarden.${SERVICE_DOMAIN}
    # TODO hibp API key?
    signupsAllowed: false
    iconBlacklistNonGlobalIps: false
    ipHeader: "X-Forwarded-For"
    adminToken:
      existingSecret: bitwarden-secrets
      existingSecretKey: admin-token
    timeZone: Europe/Berlin
    smtp:
      existingSecret: bitwarden-secrets
      host: ${SMTP_HOST}
      port: 465
      security: force_tls
      from: bitwarden@${SERVICE_DOMAIN}
      fromName: Bitwarden
      username:
        existingSecretKey: smtp-username
      password:
        existingSecretKey: smtp-password
      authMechanism: Login
    service:
      annotations:
        tailscale.com/expose: "true"
        tailscale.com/hostname: homelab-bitwarden
    ingress:
      enabled: true
      class: nginx
      nginxIngressAnnotations: true
      additionalAnnotations:
        cert-manager.io/cluster-issuer: letsencrypt
        # https://github.com/guerzon/vaultwarden/issues/117
        nginx.ingress.kubernetes.io/server-snippet: |
          location /notifications {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://vaultwarden.default.svc:80;
          }
      tls: true
      hostname: bitwarden.${SERVICE_DOMAIN}
      tlsSecret: bitwarden-tls
---
apiVersion: k8up.io/v1
kind: PreBackupPod
metadata:
  name: bitwarden-database-backup
  namespace: default
  labels:
    backup: bitwarden-database
  annotations:
    k8up.io/backup: "true"
spec:
  backupCommand: sh -c 'PGHOST="$POSTGRES_HOST" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dumpall --clean'
  pod:
    spec:
      containers:
        - name: bitwarden-database-backup
          image: postgres:15.12-alpine@sha256:ef4879231c4a490f8365bef5dfa2c137d95b7d7703d0b53605693091be48d5b4
          command:
            - "sleep"
            - "infinity"
          env:
            - name: POSTGRES_HOST
              value: vaultwarden-postgresql-rw
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: password
---
apiVersion: k8up.io/v1
kind: Schedule
metadata:
  name: bitwarden-database
  namespace: default
spec:
  backend:
    repoPasswordSecretRef:
      name: k8up-restic-secrets
      key: restic-password
    s3:
      bucket: Habitat-Giggle9-Composer/bitwarden
  backup:
    labelSelectors:
      - matchLabels:
          backup: bitwarden-database
    schedule: "23 4/6 * * *"
    concurrentRunsAllowed: false
  prune:
    schedule: "53 0 1 * *"
    concurrentRunsAllowed: false
    retention:
      keepHourly: 6
      keepDaily: 14
      keepWeekly: 12
      keepMonthly: 6
      keepYearly: 2
