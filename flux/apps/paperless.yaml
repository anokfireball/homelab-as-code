apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: paperless-ngx-postgresql
  namespace: default
spec:
  # Current paperless-ngx is built with PG 15, also use that as long as it is supported
  # https://github.com/paperless-ngx/paperless-ngx/blob/v2.13.5/Dockerfile#L96
  # https://packages.debian.org/de/bookworm/postgresql-client
  # https://www.postgresql.org/support/versioning/
  imageName: ghcr.io/cloudnative-pg/postgresql:15.10-29@sha256:802bf1479ef7b0e0655749203cded4ecbc9a114841273de71cb205f3a03254cd
  instances: 1
  managed:
    services:
      disabledDefaultServices: ["ro", "r"]
    roles:
      - name: backup
        passwordSecret:
          name: postgres-backup-user
        login: true
        superuser: false
        inRoles:
          - pg_read_all_data
  bootstrap:
    initdb:
      database: paperless-ngx
      owner: paperless-ngx
      secret:
        name: paperless-postgres-user
  storage:
    size: 2Gi
    storageClass: cluster-replicated
---
apiVersion: k8up.io/v1
kind: PreBackupPod
metadata:
  name: paperless-database-backup
  namespace: default
  labels:
    backup: paperless-database
  annotations:
    k8up.io/backup: "true"
spec:
  backupCommand: sh -c 'PGHOST="$POSTGRES_HOST" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dumpall --clean'
  pod:
    spec:
      containers:
        - name: paperless-database-backup
          image: postgres:15.12-alpine@sha256:ef4879231c4a490f8365bef5dfa2c137d95b7d7703d0b53605693091be48d5b4
          command:
            - "sleep"
            - "infinity"
          env:
            - name: POSTGRES_HOST
              value: paperless-ngx-postgresql-rw
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-user
                  key: password
---
apiVersion: k8up.io/v1
kind: Schedule
metadata:
  name: paperless-database
  namespace: default
spec:
  backend:
    repoPasswordSecretRef:
      name: k8up-restic-secrets
      key: restic-password
    s3:
      bucket: Habitat-Giggle9-Composer/paperless
  backup:
    labelSelectors:
      - matchLabels:
          backup: paperless-database
    schedule: "39 4/6 * * *"
    concurrentRunsAllowed: false
  prune:
    schedule: "9 0 1 * *"
    concurrentRunsAllowed: false
    retention:
      keepHourly: 6
      keepDaily: 14
      keepWeekly: 12
      keepMonthly: 6
      keepYearly: 2
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: paperless-ngx-redis
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: redis
      version: 22.0.4
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  values:
    auth:
      enabled: false
    global:
      storageClass: cluster-scratch
    master:
      persistence:
        size: 2Gi
    architecture: standalone
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nas-dokumente-export
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: 192.168.1.2
    path: /mnt/tank/Dokumente/Paperless/export
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nas-dokumente-export
  namespace: default
  annotations:
    # TODO this would ideally run the export command as a pre-backup script
    # ... but k8up expects pre-backup scripts to output to stdout
    k8up.io/backup: "true"
  labels:
    backup: paperless-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 1Mi
  volumeName: nas-dokumente-export
---
apiVersion: k8up.io/v1
kind: Schedule
metadata:
  name: paperless-data
  namespace: default
spec:
  backend:
    repoPasswordSecretRef:
      name: k8up-restic-secrets
      key: restic-password
    s3:
      bucket: Sighing-Guacamole-Shading7
  backup:
    labelSelectors:
      - matchLabels:
          backup: paperless-data
    schedule: "32 0/6 * * *"
    concurrentRunsAllowed: false
  podSecurityContext:
    runAsUser: 1000
  prune:
    schedule: "02 0 1 * *"
    concurrentRunsAllowed: false
    retention:
      keepHourly: 6
      keepDaily: 14
      keepWeekly: 12
      keepMonthly: 6
      keepYearly: 2
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: set-paperless-script-permissions
spec:
  mutateExistingOnPolicyUpdate: true
  rules:
    - name: add-execute-permissions-to-script
      match:
        any:
          - resources:
              kinds:
                - Deployment
              names:
                - paperless-ngx-main
              namespaces:
                - default
      mutate:
        targets:
          - apiVersion: apps/v1
            kind: Deployment
            name: paperless-ngx-main
        patchStrategicMerge:
          spec:
            template:
              spec:
                volumes:
                  - name: postconsumptionscript
                    configMap:
                      name: paperless-ngx-postconsumptionscript
                      defaultMode: 0755
                      optional: false
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: paperless-ngx
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    global:
      alwaysAppendIdentifierToResourceName: true
    controllers:
      main:
        containers:
          main:
            image:
              repository: ghcr.io/paperless-ngx/paperless-ngx
              tag: 2.18.1@sha256:2dbee2d7fea624af8f12877936f6d728f351d2b8f4ddb34bdc06d933f0f47200
            env:
              PAPERLESS_OCR_LANGUAGES: deu eng
              PAPERLESS_OCR_LANGUAGE: deu+eng
              PAPERLESS_URL: https://paperless.${SERVICE_DOMAIN}
              PAPERLESS_SECRET_KEY:
                valueFrom:
                  secretKeyRef:
                    name: paperless-secrets
                    key: paperless-secret-key
              PAPERLESS_TIME_ZONE: Europe/Berlin
              PAPERLESS_CONSUMER_DELETE_DUPLICATES: true
              PAPERLESS_CONSUMER_RECURSIVE: true
              PAPERLESS_CONSUMER_POLLING: 60
              PAPERLESS_PRE_CONSUME_SCRIPT: /postconsumptionscript/export.sh
              PAPERLESS_DBHOST: paperless-ngx-postgresql-rw
              PAPERLESS_DBUSER: paperless-ngx
              PAPERLESS_DBPASS:
                valueFrom:
                  secretKeyRef:
                    name: paperless-postgres-user
                    key: password
              PAPERLESS_DBNAME: paperless-ngx
              PAPERLESS_REDIS: redis://paperless-ngx-redis-master:6379
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 10m
                memory: 1Gi
    configMaps:
      postconsumptionscript:
        data:
          export.sh: |
            #!/usr/bin/env bash
            document_exporter /usr/src/paperless/export
    service:
      main:
        controller: main
        annotations:
          tailscale.com/expose: "true"
          tailscale.com/hostname: homelab-paperless
        ports:
          http:
            port: 8000
    ingress:
      main:
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
          nginx.ingress.kubernetes.io/proxy-body-size: 1G
        hosts:
          - host: paperless.${SERVICE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
        tls:
          - secretName: paperless-tls
            hosts:
              - paperless.${SERVICE_DOMAIN}
    persistence:
      postconsumptionscript:
        type: configMap
        name: paperless-ngx-postconsumptionscript
      data:
        type: persistentVolumeClaim
        storageClass: cluster-replicated
        accessMode: ReadWriteOnce
        size: 2Gi
        globalMounts:
          - path: /usr/src/paperless/data
      consume:
        type: nfs
        server: 192.168.1.2
        path: /mnt/tank/Dokumente/Paperless/consume
        globalMounts:
          - path: /usr/src/paperless/consume
      media:
        type: persistentVolumeClaim
        storageClass: cluster-replicated
        accessMode: ReadWriteOnce
        size: 25Gi
        globalMounts:
          - path: /usr/src/paperless/media
      export:
        existingClaim: nas-dokumente-export
        globalMounts:
          - path: /usr/src/paperless/export
